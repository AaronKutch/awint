name: Awint CI

on: [pull_request]

env:
  # NOTE: do not set RUSTFLAGS here, because it overwrites
  # what `.cargo/config.toml` sets for `no_alloc_build`
  RUST_BACKTRACE: 1
  # we can't use `--all-features` because of the `_digits` flags, use
  # FIXME add back const_support
  ALL_FEATURES: "--features=std,zeroize_support,rand_support,serde_support,dag,try_support,debug"
  NON_STD_FEATURES: "--features=zeroize_support,rand_support,serde_support"

jobs:
  test_suite:
    name: Test suite
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust components
        run: |
          rustup set profile minimal
          rustup default nightly
      - name: Run test suite
        run: |
          cargo bench $ALL_FEATURES
          cargo test $ALL_FEATURES
          cargo test --release $ALL_FEATURES
          cargo test $ALL_FEATURES,u8_digits
          cargo test $ALL_FEATURES,u16_digits
          cargo test $ALL_FEATURES,u32_digits
          cargo test $ALL_FEATURES,u64_digits
          cargo test $ALL_FEATURES,u128_digits

  # FIXME fix features when we can compile const_support again
  const_test:
    name: Test suite
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust components
        run: |
          rustup set profile minimal
          rustup install nightly-2023-04-14
      - name: Run test suite
        run: |
          cargo +nightly-2023-04-14 t $ALL_FEATURES,const_support

  miri:
    name: Miri
    runs-on: ubuntu-latest
    # note: we have turned on this Miri flag
    env:
      RUSTFLAGS: -D warnings
      MIRIFLAGS: -Zmiri-tree-borrows
    steps:
      - uses: actions/checkout@v2
      - name: Install most recent Miri
        run: |
          rustup set profile minimal
          rustup default "nightly-$(curl -s https://rust-lang.github.io/rustup-components-history/x86_64-unknown-linux-gnu/miri)"
          rustup component add miri
      - name: Run test suite with Miri
        run: |
          cargo miri test $ALL_FEATURES

  # we run `cargo doc` here, because running `cargo doc` anywhere somehow requires `core` from the
  # target in no_alloc_test
  no_alloc_build:
    name: Doc and Build for no-std and no-alloc
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install nightly-riscv32i-unknown-none-elf
        run: |
          rustup set profile minimal
          rustup default nightly
          rustup target add riscv32i-unknown-none-elf
      # no_alloc_test has `NON_STD_FEATURES` enabled in its `Cargo.toml`
      - name: Run `cargo doc` and `cargo build`
        run: |
          cargo doc $ALL_FEATURES
          cd no_alloc_test && cargo build --target riscv32i-unknown-none-elf

  stable_build:
    name: Build on stable
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust components
        run: |
          rustup set profile minimal
          rustup install 1.66.1
      # In the past I have had problems with features not being orthogonal due to configuration
      # mistakes, so we test several combinations here
      - name: Run `cargo build`
        run: |
          cargo run --bin stable --no-default-features --features=std,rand_support,serde_support,zeroize_support,dag,debug
          cargo build --no-default-features --features=std,rand_support,serde_support,zeroize_support,dag,debug
          cargo build --no-default-features --features=alloc
          cargo build --no-default-features --features=std
          cargo build --no-default-features --features=zeroize_support
          cargo build --no-default-features --features=rand_support
          cargo build --no-default-features --features=serde_support
          cargo build --no-default-features --features=dag
          cargo build --no-default-features --features=debug
          cargo build --no-default-features

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Acquire the most recent nightly with a rustfmt component
      - name: Install most recent Rustfmt
        run: |
          rustup set profile minimal
          rustup default "nightly-$(curl -s https://rust-lang.github.io/rustup-components-history/x86_64-unknown-linux-gnu/rustfmt)"
          rustup component add rustfmt
      - name: Run `cargo fmt`
        run: |
          cargo fmt -- --check
          cd no_alloc_test && cargo fmt -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Acquire the most recent nightly with a clippy component
      - name: Install most recent Clippy
        run: |
          rustup set profile minimal
          rustup default "nightly-$(curl -s https://rust-lang.github.io/rustup-components-history/x86_64-unknown-linux-gnu/clippy)"
          rustup component add clippy
      - name: Run `cargo clippy`
        # note: run clippy on no_alloc_test manually
        run: |
          cargo clippy --all --all-targets $ALL_FEATURES -- -D clippy::all

  # makes sure the tests work on 32 bit and 64 bit big endian targets
  cross-compile-big-endian:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: cross-compile-mips
      run: |
        rustup set profile minimal
        rustup default nightly
        cargo install cross
        cross test --target mips64-unknown-linux-gnuabi64 $ALL_FEATURES
        cross test --target mips-unknown-linux-gnu $ALL_FEATURES
